package com.crmindz.helpdesk.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.crmindz.helpdesk.entity.Ticket;
import com.crmindz.helpdesk.entity.User;
import com.crmindz.helpdesk.service.TicketManagementService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@Controller
public class TicketManagementController {

	@Autowired
	public TicketManagementService ticketService;

	@RequestMapping(value = "/helpDesk", method = RequestMethod.GET)
	public String showHelpDeskWelcomePage(HttpServletRequest request, HttpServletResponse response,
			HttpSession session) {

		return "helpDeskWelcome";

	}

	@RequestMapping("/raiseTicket")
	public ModelAndView showTicketForm(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) {

		String ticketCategoryDropdown = "";

		List<Map<String, String>> ticketCategoryInfo = ticketService.getTicketCategoryInfo();

		for (Map<String, String> ticketCategory : ticketCategoryInfo) {
			ticketCategoryDropdown += "<option value='" + ticketCategory.get("value") + "'>"
					+ ticketCategory.get("name") + "</option>";
			// System.out.println(ticketCategoryDropdown);
		}

		ModelAndView modelView = new ModelAndView("ticketRaise");
		modelView.addObject("ticketCategoryDropDown", ticketCategoryDropdown);
		// modelMap.put("ticketCategoryDropDown",ticketCategoryDropdown);
		return modelView;

	}

	@RequestMapping("/ticketSubCategory")
	@ResponseBody
	public String getTicketSubcategory(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) {

		String ticketCategoryVal = request.getParameter("valAjax");
		response.setContentType("text/html;charset=UTF-8");
		String ticketSubCategoryDropdown = "";

		List<Map<String, String>> ticketSubCategoryInfo = ticketService.getTicketSubCategoryInfo(ticketCategoryVal);

		for (Map<String, String> ticketSubCategory : ticketSubCategoryInfo) {
			ticketSubCategoryDropdown += "<option value='" + ticketSubCategory.get("value") + "'>"
					+ ticketSubCategory.get("name") + "</option>";
			// System.out.println(ticketCategoryDropdown);
		}

		return ticketSubCategoryDropdown;

	}

	@RequestMapping(value = "/dashBoard", method = RequestMethod.GET)
	public String showDashBoard(HttpServletRequest request, HttpServletResponse response, HttpSession session) {

		if (session.getAttribute("userName") != null) {

			String userName = (String) session.getAttribute("userName");

			String userType = ticketService.getUserType(userName);

			if ("E".equals(userType)) {
				return "employeeDashboard";
			} else {
				return "dashboard";
			}

		}

		else {
			return "ticketManagementError";
		}

	}

	@RequestMapping("/signOut")
	public ModelAndView signOut(HttpServletRequest request, HttpServletResponse response, HttpSession session) {

		System.out.println(session.getAttribute("userName"));

		session.invalidate();

		return new ModelAndView("login");

	}

	@RequestMapping("/submitTicket")
	public ModelAndView submitTicket(HttpServletRequest request, HttpServletResponse response, HttpSession session,
			@ModelAttribute("ticketInfo") Ticket ticketInfo) {

		ticketInfo.setStatus("pending");
		ticketInfo.setComments("under review");

		String sessionAttribute = (String) session.getAttribute("userName");
		// System.out.println(sessionAttribute);
		ticketService.saveTicketInfo(ticketInfo, sessionAttribute);

		return new ModelAndView("dashboard");
	}

	@RequestMapping(value = "/ticketData", method = RequestMethod.POST)
	public String showGridData(HttpServletRequest request, HttpServletResponse response, HttpSession session) {

		String userName = (String) session.getAttribute("userName");

		List<Ticket> ticketDetails = ticketService.getTicketDetails(userName);

		Gson gson = new GsonBuilder().setPrettyPrinting().create();

		String jsonArray = gson.toJson(ticketDetails);

		String forward = "gridData";
		request.setAttribute("gridData", jsonArray);

		return forward;

	}

	@RequestMapping(value = "/ticketDataForEmployeeGrid", method = RequestMethod.POST)
	public String showGridDataforEmployee(HttpServletRequest request, HttpServletResponse response,
			HttpSession session) {

		List<Ticket> ticketDetails = ticketService.getTicketDetailsForEmployee();

		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		String jsonArray = gson.toJson(ticketDetails);

		String forward = "employeeGridData";

		request.setAttribute("employeeGridData", jsonArray);

		return forward;

	}

	@RequestMapping(value = "/ticketApprove", method = RequestMethod.POST)
	@ResponseBody
	public String showApprovedGridDataforEmployee(HttpServletRequest request, HttpServletResponse response,
			HttpSession session) {

		int ticketID = Integer.parseInt(request.getParameter("val"));
		String comments = request.getParameter("comments");
		System.out.println(comments);

		List<Ticket> ticketDetails = ticketService.getApprovedTicketDetailsForEmployee(ticketID, comments);

		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		String jsonArray = gson.toJson(ticketDetails);
		// String forward = "approvedEmployeeGrid";
		// request.setAttribute("approvedEmployeeGrid", jsonArray);
		return jsonArray;

	}

	@RequestMapping(value = "/ticketReject", method = RequestMethod.POST)
	@ResponseBody
	public String showRejectedGridDataforEmployee(HttpServletRequest request, HttpServletResponse response,
			HttpSession session) {

		int ticketID = Integer.parseInt(request.getParameter("val"));
		String comments = request.getParameter("comments");
		System.out.println(comments);

		List<Ticket> ticketDetails = ticketService.getRejectedTicketDetailsForEmployee(ticketID, comments);
		Gson gson = new GsonBuilder().setPrettyPrinting().create();

		String jsonArray = gson.toJson(ticketDetails);
		// String forward = "approvedEmployeeGrid";
		// request.setAttribute("approvedEmployeeGrid", jsonArray);
		return jsonArray;

	}

	@RequestMapping(value = "/ticketApproveList", method = RequestMethod.POST)
	public String showApprovedListGridDataforEmployee(HttpServletRequest request, HttpServletResponse response,
			HttpSession session) {

		List<Ticket> ticketDetails = ticketService.getApprovedListTicketDetailsForEmployee();

		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		String jsonArray = gson.toJson(ticketDetails);

		String forward = "approvedEmployeeGrid";
		request.setAttribute("approvedEmployeeGrid", jsonArray);

		return forward;

	}

	@RequestMapping(value = "/ticketRejectList", method = RequestMethod.POST)
	public String showRejectedListGridDataforEmployee(HttpServletRequest request, HttpServletResponse response,
			HttpSession session) {

		List<Ticket> ticketDetails = ticketService.getRejectedListTicketDetailsForEmployee();

		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		String jsonArray = gson.toJson(ticketDetails);

		String forward = "rejectedEmployeeGrid";

		request.setAttribute("rejectedEmployeeGrid", jsonArray);

		return forward;

	}
}
